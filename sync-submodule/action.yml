# awesome-list-toolkit/sync-submodule-content/action.yml
name: 'Sync Submodule Content'
description: 'Syncs content from a source (submodule) directory to a destination directory using rsync.'
author: 'Your Name/Organization'

inputs:
  source_path:
    description: 'Source directory (e.g., the submodule path like "origin"). Content from here will be copied.'
    required: true
  destination_path:
    description: 'Destination directory (e.g., "." for repository root).'
    required: true
  rsync_exclude_from_file:
    description: |
      Filename of an rsync exclude patterns file located *within the source_path directory*.
      If the file doesn't exist, default excludes are applied (especially for root syncs).
    required: false
    default: '.rsync-excludes' # e.g., origin/.rsync-excludes
  extra_rsync_args:
    description: 'Any extra arguments to pass to rsync.'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Sync content using rsync
      shell: bash
      run: |
        set -e
        SOURCE_DIR="${{ inputs.source_path }}"
        DEST_DIR="${{ inputs.destination_path }}"
        EXCLUDE_FILENAME_IN_SOURCE="${{ inputs.rsync_exclude_from_file }}" # e.g., .rsync-excludes
        EXTRA_ARGS="${{ inputs.extra_rsync_args }}"

        echo "Syncing from '$SOURCE_DIR/' to '$DEST_DIR/'"

        # Ensure source path for rsync ends with a slash to copy contents, not the directory itself
        SOURCE_FOR_RSYNC="$SOURCE_DIR"
        if [[ "$SOURCE_FOR_RSYNC" != */ ]]; then
          SOURCE_FOR_RSYNC="$SOURCE_FOR_RSYNC/"
        fi

        # Ensure destination directory exists
        mkdir -p "$DEST_DIR"

        # Debug: List contents of source directory and check for an unexpected '.git' file/dir
        echo "--- Debug: Listing root of source directory ($SOURCE_DIR) before rsync ---"
        ls -la "$SOURCE_DIR"
        if [ -f "$SOURCE_DIR/.git" ]; then
          echo "CRITICAL WARNING: Source directory $SOURCE_DIR contains a FILE named .git!"
          echo "This is highly unusual for a submodule's working tree and will likely cause rsync issues."
        elif [ -d "$SOURCE_DIR/.git" ]; then
          # This is also unexpected for a submodule's *content* that's meant to be synced.
          # The actual .git metadata for a submodule lives in the parent repo's .git/modules/ directory.
          echo "WARNING: Source directory $SOURCE_DIR contains a DIRECTORY named .git in its content."
          echo "This is usually not part of a submodule's synced content. Consider excluding it via rsync_exclude_from_file."
        fi
        echo "--- End Debug ---"

        RSYNC_CMD_BASE="rsync -av --checksum --delete $EXTRA_ARGS"
        FINAL_RSYNC_CMD=""
        USER_EXCLUDE_FILE_FULL_PATH="$SOURCE_DIR/$EXCLUDE_FILENAME_IN_SOURCE"

        if [ -f "$USER_EXCLUDE_FILE_FULL_PATH" ]; then
          # User has an exclude file in the source directory, use it.
          # These patterns are relative to the source directory's content.
          echo "Using user-provided exclude file (from source): $USER_EXCLUDE_FILE_FULL_PATH"
          # Also add a general --exclude='.git/' to prevent copying any stray .git from source content,
          # though the user's exclude file should ideally handle this if necessary.
          FINAL_RSYNC_CMD="$RSYNC_CMD_BASE --exclude-from=$USER_EXCLUDE_FILE_FULL_PATH --exclude='.git/' \"$SOURCE_FOR_RSYNC\" \"$DEST_DIR\""
        elif [ "$DEST_DIR" = "." ] || [ "$DEST_DIR" = "./" ]; then
          # Destination is root, AND no user exclude file was found. Apply CRITICAL default excludes.
          # These patterns are anchored to the root of the transfer (destination root) to protect parent repo files.
          echo "Destination is root and no user exclude file found. Applying critical default protection excludes for destination."
          
          # Get the basename of the source directory (e.g., "origin" from "origin" or "path/to/origin")
          SOURCE_DIR_BASENAME=$(basename "$SOURCE_DIR")

          # Note: Using an array for excludes and then joining them can be safer than complex string concatenation.
          # However, for shell: bash, direct string construction is common. Be mindful of quoting.
          # The following uses direct string construction with escaped single quotes for --exclude values.
          # This ensures that patterns like '/.git/' are passed correctly to rsync.
          EXCLUDE_ARGS="--exclude='/.git/' \
            --exclude='/.github/' \
            --exclude='/.gitmodules' \
            --exclude='/LICENSE' \
            --exclude='/LICENSE.md' \
            --exclude='/LICENSE.txt' \
            --exclude='/${SOURCE_DIR_BASENAME}/' \
            --exclude='.DS_Store'" # Common macOS file

          FINAL_RSYNC_CMD="$RSYNC_CMD_BASE $EXCLUDE_ARGS \"$SOURCE_FOR_RSYNC\" \"$DEST_DIR\""
        else
          # Destination is NOT root, AND no user exclude file. Apply basic default exclude for source .git.
          echo "Destination is not root ($DEST_DIR) and no user exclude file found. Applying minimal default excludes for source."
          FINAL_RSYNC_CMD="$RSYNC_CMD_BASE --exclude='.git/' --exclude='.DS_Store' \"$SOURCE_FOR_RSYNC\" \"$DEST_DIR\""
        fi
        
        echo "Executing rsync command:"
        echo "$FINAL_RSYNC_CMD"
        # Using eval here. Ensure inputs are controlled (they are from action.yml).
        # If command string gets extremely complex, consider alternative execution methods.
        eval "$FINAL_RSYNC_CMD"

        echo "Content sync finished."
        if [ "$DEST_DIR" = "." ] || [ "$DEST_DIR" = "./" ]; then
          echo "IMPORTANT: Rsync with --delete was used to sync to the repository root."
          echo "Review the applied excludes to ensure all essential parent repository files were protected."
          echo "Applied rsync command was: $FINAL_RSYNC_CMD"
        fi
