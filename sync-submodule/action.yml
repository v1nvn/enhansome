# awesome-list-toolkit/sync-submodule-content/action.yml
name: 'Sync Specific Submodule Content'
description: 'Syncs specified files and directories from a source (submodule) to a destination, preserving relative paths.'
author: 'Your Name/Organization'

inputs:
  source_path:
    description: 'Source directory (e.g., the submodule path like "origin").'
    required: true
  destination_path:
    description: 'Destination directory (e.g., "." for repository root).'
    required: true
  items_to_sync:
    description: |
      Space-separated list of files and/or directories to sync from the source_path.
      Paths should be relative to the source_path.
      Example: "README.md images/logo.png docs/"
    required: false
    default: 'README.md' # Default to syncing only README.md
  extra_rsync_args:
    description: 'Any extra arguments to pass to rsync. Use with caution, as --delete is not used by default by this action.'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Sync specified content using rsync
      shell: bash
      run: |
        set -e
        SOURCE_DIR="${{ inputs.source_path }}"
        DEST_DIR="${{ inputs.destination_path }}"
        ITEMS_TO_SYNC_STRING="${{ inputs.items_to_sync }}"
        EXTRA_ARGS="${{ inputs.extra_rsync_args }}"

        echo "Source Directory: $SOURCE_DIR"
        echo "Destination Directory: $DEST_DIR"
        echo "Items to Sync: \"$ITEMS_TO_SYNC_STRING\""
        echo "Extra rsync args: \"$EXTRA_ARGS\""

        if [ -z "$ITEMS_TO_SYNC_STRING" ]; then
          echo "No items specified to sync. Exiting."
          exit 0
        fi

        # Create a temporary file to list items for rsync's --files-from
        SYNC_LIST_FILE=$(mktemp)
        echo "Temporary sync list file created: $SYNC_LIST_FILE"

        # Populate the sync list file from the space-separated input string
        # Convert space-separated string to an array to handle items with spaces if quoted (though simple space separation is assumed)
        read -r -a ITEMS_ARRAY <<< "$ITEMS_TO_SYNC_STRING"
        
        item_count=0
        for item in "${ITEMS_ARRAY[@]}"; do
          if [ -n "$item" ]; then # Ensure item is not an empty string
            # Check if item exists in source. Rsync will also warn, but this provides an earlier heads-up.
            FULL_SOURCE_ITEM_PATH="$SOURCE_DIR/$item" # Paths in ITEMS_ARRAY are relative to SOURCE_DIR
            if [ ! -e "$FULL_SOURCE_ITEM_PATH" ]; then
              echo "Warning: Item '$item' (resolved to '$FULL_SOURCE_ITEM_PATH') not found in source directory. Rsync will skip it."
            fi
            echo "$item" >> "$SYNC_LIST_FILE"
            item_count=$((item_count + 1))
          fi
        done

        if [ "$item_count" -eq 0 ]; then
          echo "Sync list is empty after processing input items. Nothing to sync."
          rm "$SYNC_LIST_FILE"
          exit 0
        fi

        echo "--- Content of sync list file ($SYNC_LIST_FILE) ---"
        cat "$SYNC_LIST_FILE"
        echo "--- End of sync list file ---"

        # Ensure destination directory exists
        mkdir -p "$DEST_DIR"
        
        # Base rsync command:
        # -a: archive mode (recursive, preserves symlinks, permissions, times, group, owner, devices)
        # -v: verbose
        # -R (--relative): Use full path names specified in --files-from. This is crucial for preserving directory structure.
        # NO --delete by default. This action is additive.
        # Source path must end with a slash for --files-from and -R to work as expected,
        # making paths in the list relative to this source directory.
        # Destination path should also end with a slash if it's a directory.

        SOURCE_FOR_RSYNC="$SOURCE_DIR"
        if [[ "$SOURCE_FOR_RSYNC" != */ ]]; then
          SOURCE_FOR_RSYNC="$SOURCE_FOR_RSYNC/"
        fi
        
        DEST_FOR_RSYNC="$DEST_DIR"
        if [[ "$DEST_FOR_RSYNC" != */ ]]; then
          DEST_FOR_RSYNC="$DEST_FOR_RSYNC/"
        fi

        RSYNC_CMD="rsync -avR --files-from=$SYNC_LIST_FILE $EXTRA_ARGS \"$SOURCE_FOR_RSYNC\" \"$DEST_FOR_RSYNC\""
        
        echo "Executing rsync command:"
        echo "$RSYNC_CMD"
        # Using eval for the command. Inputs are from action.yml.
        eval "$RSYNC_CMD"

        # Clean up the temporary file
        rm "$SYNC_LIST_FILE"
        echo "Temporary sync list file removed."
        echo "Specified content synced."
